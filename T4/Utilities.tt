<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="VSLangProj" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>

<#+ 


    // 
    public bool IsIncomingType(EnvDTE.CodeClass c) {
        return c.Name.EndsWith("Request"); // || c.Name.EndsWith("Dto");
    }

    public bool IsOutgoingType(EnvDTE.CodeClass c) {
        return c.Name.EndsWith("Response"); // || c.Name.EndsWith("Dto");
    }

    // Gets the generic type of which the lists exists (supports List<>, ICollection<>)
    public string GetListedType(EnvDTE.CodeProperty property)
    {
        return property.Type.AsFullName
            .Replace("System.Collections.Generic.List<", "").Replace(">","")
            .Replace("System.Collections.Generic.IList<", "").Replace(">","")
            .Replace("System.Collections.Generic.ICollection<", "").Replace(">","");
    }



    public bool IsCollection(String typeName) {
        return typeName.StartsWith("System.Collections.Generic.List") ||
            typeName.StartsWith("System.Collections.Generic.IList") ||
            typeName.StartsWith("System.Collections.Generic.ICollection")	
            ;
    }

    public bool IsClassIncludedInList(List<EnvDTE.CodeClass> classes, String name) {
        return classes.Any(dt => dt.Namespace.Name + "." + dt.Name == name);
    }
   
    public List<EnvDTE.CodeProperty> GetAllPropertiesAndInheritedProperties(EnvDTE.CodeClass domainClass, List<EnvDTE.CodeClass> allClasses) {
        var properties = FindProperties(domainClass.Members);

        AddBaseClassProperties(domainClass, allClasses, properties);


        return properties;
    }

    public void AddBaseClassProperties(EnvDTE.CodeClass domainClass, List<EnvDTE.CodeClass> allClasses, List<EnvDTE.CodeProperty> properties) {
        
        if	(domainClass.Bases  != null) {
            foreach(CodeElement  b in domainClass.Bases )
            {
                //if(IsClassIncludedInList(allClasses, b.FullName)) {
                    EnvDTE.CodeClass parent =  ((EnvDTE.CodeClass)b);
                    AddProperties(properties, parent.Members);

                    AddBaseClassProperties(parent, allClasses, properties);
                //}
            }
        }        
    }


    public void AddProperties(List<EnvDTE.CodeProperty> properties, EnvDTE.CodeElements elements)
    {
        foreach (EnvDTE.CodeElement element in elements)
        {
            EnvDTE.CodeProperty p = element as EnvDTE.CodeProperty;
        
            if (p != null)
                properties.Add(p);            
        }
    
    }

    public List<EnvDTE.CodeProperty> FindProperties(EnvDTE.CodeElements elements)
    {
        List<EnvDTE.CodeProperty> properties = new List<EnvDTE.CodeProperty>();
        
        foreach (EnvDTE.CodeElement element in elements)
        {
            EnvDTE.CodeProperty p = element as EnvDTE.CodeProperty;
        
            if (p != null)
                properties.Add(p);            
        }
    
        return properties;
    }


    // Helper method to recursively retrieve all the project items
    private List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
    {
        var ret = new List<EnvDTE.ProjectItem>();
		
        if (items == null) 
            return ret;             
		
        foreach(EnvDTE.ProjectItem item in items)
        {
            ret.Add(item);
            ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
        }
		
        return ret;
    }
#>