<#@ template language="C#" debug="false" hostspecific="true" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>



<#+
public void GenerateRequestCqrsMappings(List<EnvDTE.CodeClass> apiContractClasses, List<EnvDTE.CodeClass> cqrsClasses) 
    {
#>
using System;
using System.Linq;

using AutoMapper;

public class RequestToCqrsMappings : Profile
{
    public RequestToCqrsMappings()
    {
        AddGlobalIgnore("Notifications");

        <#+
        foreach(var contractClass in apiContractClasses)
        {   
            var matchingCqrsName = GetMatchingCqrsClassNameFor(contractClass);            
            foreach(var cqrsClass in cqrsClasses)
            {    
            #>  
// <#= contractClass.Name #> <#= matchingCqrsName #>
<#+
    if (cqrsClass.Name == matchingCqrsName)
    {
        GenerateRequestCqrsMapperConfiguration(contractClass.Name, contractClass, cqrsClass);break;
    }
}
            #>
        <#+ 
        }
        #>
    }
}
<#+
    }
#>


<#+
public void GenerateRequestCqrsMapperConfiguration(string name, EnvDTE.CodeClass requestClass, EnvDTE.CodeClass cqrsClass) 
{   
   var isIncoming = IsIncomingType(requestClass);
   var isOutgoing = IsOutgoingType(requestClass);
#>
<#+ if (isIncoming) {#>
CreateMap<<#= requestClass.FullName #>, <#= cqrsClass.FullName#>>();
<#+ } #>
<#+  if (isOutgoing) {#>
CreateMap<<#= cqrsClass.FullName #>, <#= requestClass.FullName#>>();
<#+ }#>
<#+ }#>