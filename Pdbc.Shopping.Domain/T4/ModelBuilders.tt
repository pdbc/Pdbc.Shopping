<#@ template language="C#" debug="false" hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="EnvDTE" #>

<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>

<#@ include file="$(SolutionDir)T4\Utilities.tt" #>
<#@ include file="$(SolutionDir)T4\BuilderGenerationTemplates.tt" #>
<#
    // Setup variables for using throughout the script.
    var project = GetCurrentProject();
    var projectName = project.FullName;
    var classes = GetNamespaceClasses(project, "Model"); 
#>
using System;
using System.Linq;

using Pdbc.Shopping.Common;
<# 
	foreach(var c in classes)
	{        
		// Setup the variables that will be used throughout the script for this particular class	
        var className = c.Name;
        var classNamespace = c.Namespace.Name;
        var classNameFullyQualified = classNamespace + "." +className;

        var builderName = className+"Builder";

        var properties = GetAllPropertiesAndInheritedProperties(c, classes);
#>

namespace <#=classNamespace#> {
    public partial class <#= builderName #> : ObjectBuilder<<#= classNameFullyQualified #>>
	{
       <#foreach(var property in properties)
	   {
            // Setup the variables that will be used throughout the script for this particular class	
            var propertyTypeFullName = property.Type.AsFullName;
            var propertyName = property.Name;
            var propertyNameAsAttribute = property.Name.ToLower();
			if (propertyNameAsAttribute == "continue")
			{
				propertyNameAsAttribute = "_" + propertyNameAsAttribute;
			}

            var isCollectionTypeProperty = IsCollection(propertyTypeFullName);
            var isTypeInClassesCollection = IsClassIncludedInList(classes, propertyTypeFullName);

            var listedType = "";
            if (isCollectionTypeProperty) {
                listedType = GetListedType(property);
            }

            var propertyBuilderFullName = "";
            if (isTypeInClassesCollection) {
                propertyBuilderFullName = propertyTypeFullName+"Builder";
            }

            //GenerateInfoRegionForPropertyTemplate(propertyTypeFullName, propertyName, propertyNameAsAttribute, isCollectionTypeProperty, isTypeInClassesCollection, listedType, propertyBuilderFullName);
            if (isCollectionTypeProperty) 
            {              
                GenerateForCollectionBuilderTemplate(builderName, propertyTypeFullName, propertyName, propertyNameAsAttribute, listedType); 
            } 
            else 
            {
                GenerateSingleItemBuilderTemplate(builderName, propertyTypeFullName, propertyName, propertyNameAsAttribute);
            }

            if (isTypeInClassesCollection) 
            {    
                GenerateNesterBuilderTemplate(builderName, propertyName, propertyBuilderFullName, propertyNameAsAttribute);
            }
	   } 
	   #>


<#
GenerateBuildMethod(className, properties);
#>
       
    }
}
<#
	} /* foreach (classes) */
#>